name: 'Test and Build'

on:
  push:
    branches:
      - main
      - dev
  pull_request:

permissions:
  contents: read

jobs:
  test-and-build:
    name: Test and Build PastePerfect
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Set up Node.js
        uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5
        with:
          node-version: 'lts/*'  # Use latest LTS version
          cache: 'npm'

      - name: Install dependencies
        run: npm ci  # Uses package-lock.json for reproducible installs

      - name: Lint code
        run: npm run lint:check

      - name: Check code formatting
        run: npm run format:check

      - name: Create reports directory
        run: mkdir -p reports/jest

      - name: Run unit tests
        run: npm run test:unit:ci


      - name: List all files after test
        run: |
          echo "=== Root directory ==="
          ls -la
          echo "=== Reports directory ==="
          find . -name "*.xml" -type f 2>/dev/null || echo "No XML files found anywhere"
          echo "=== Check if reports dir exists ==="
          ls -la reports/ 2>/dev/null || echo "Reports directory doesn't exist"
        if: always()

      - name: Build application
        run: npm run build-prod

      - name: Get Playwright version
        id: playwright-version
        run: echo "version=$(npm list @playwright/test --depth=0 --json | jq -r '.dependencies["@playwright/test"].version')" >> $GITHUB_OUTPUT

      - name: Cache Playwright browsers
        uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: playwright-${{ runner.os }}-${{ steps.playwright-version.outputs.version }}

      - name: Install Playwright browsers
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps

      - name: Run snapshot tests
        run: npm run test:snapshots

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4  # upload test results
        if: always()        # run this step even if previous step failed
        with:
          name: test-reports
          path: reports/

  report:
    name: Generate Test Reports
    runs-on: ubuntu-latest
    needs: test-and-build

    steps:
      - name: List test reports
        run: find reports/ -type f -name "*.xml" || echo "No XML files found"
        if: always()
      - name: Generate JEST test report
        uses: dorny/test-reporter@dc3a92680fcc15842eef52e8c4606ea7ce6bd3f3 # v2
        with:
          artifact: test-reports
          name: JEST Tests
          path: 'jest/report.xml'
          reporter: jest-junit
      - name: Generate Snapshot test report
        uses: dorny/test-reporter@dc3a92680fcc15842eef52e8c4606ea7ce6bd3f3 # v2
        with:
          artifact: test-reports
          name: Snapshot Tests
          path: 'playwright/report.xml'
          reporter: jest-junit
